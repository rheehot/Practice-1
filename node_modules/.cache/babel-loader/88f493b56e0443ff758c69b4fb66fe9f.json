{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zulie/Desktop/zulie/practice/practice/src/pages/Array.js\",\n    _s = $RefreshSig$();\n\nimport React from ' react';\nimport Grid from './Grid';\nimport { atom, useRecoilState } from 'recoil';\n\nfunction Array() {\n  _s();\n\n  const state = atom({\n    key: 'grid',\n    default: []\n  });\n  const [imageList, setImageList] = useRecoilState(state);\n\n  const onFileChange = e => {\n    const {\n      target: {\n        files\n      }\n    } = e;\n    const theFile = files[0];\n    const reader = new FileReader(); //객체를 이용해 컴퓨터에 저장하는 것을 가능하게\n\n    reader.readAsDataURL(theFile); //읽을 객체\n\n    reader.onloadend = finishedEvent => {\n      //읽기 동작이 성공적으로 완료 되었을 때 발생\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setImageList(imageList => [...imageList, {\n        src: result,\n        id: imageList.length,\n        theFile\n      }]);\n    };\n  };\n\n  const removeItems = () => {\n    setImageList(imageList.filter(imageList => imageList.id !== imageList.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ImageList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      removeItems: removeItems,\n      imageList: imageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"CMDnigB18yOXQvnM8mxKEJRk/sw=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = Array;\nexport default Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/Users/zulie/Desktop/zulie/practice/practice/src/pages/Array.js"],"names":["React","Grid","atom","useRecoilState","Array","state","key","default","imageList","setImageList","onFileChange","e","target","files","theFile","reader","FileReader","readAsDataURL","onloadend","finishedEvent","currentTarget","result","src","id","length","removeItems","filter"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,QAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,QAArC;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAMC,KAAK,GAAGH,IAAI,CAAC;AACfI,IAAAA,GAAG,EAAE,MADU;AAEfC,IAAAA,OAAO,EAAE;AAFM,GAAD,CAAlB;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,cAAc,CAACE,KAAD,CAAhD;;AAEA,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC5B,UAAM;AAAEC,MAAAA,MAAM,EAAG;AAACC,QAAAA;AAAD;AAAX,QAAuBF,CAA7B;AACI,UAAMG,OAAO,GAAGD,KAAK,CAAC,CAAD,CAArB;AACA,UAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf,CAHwB,CAGS;;AACjCD,IAAAA,MAAM,CAACE,aAAP,CAAqBH,OAArB,EAJwB,CAIO;;AAC/BC,IAAAA,MAAM,CAACG,SAAP,GAAoBC,aAAD,IAAkB;AAAE;AACnC,YAAM;AAAEC,QAAAA,aAAa,EAAE;AAAEC,UAAAA;AAAF;AAAjB,UAAgCF,aAAtC;AACAV,MAAAA,YAAY,CAAED,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAe;AAACc,QAAAA,GAAG,EAAED,MAAN;AAAeE,QAAAA,EAAE,EAAEf,SAAS,CAACgB,MAA7B;AAAqCV,QAAAA;AAArC,OAAf,CAAhB,CAAZ;AACH,KAHD;AAIH,GATD;;AAWA,QAAMW,WAAW,GAAG,MAAM;AACtBhB,IAAAA,YAAY,CAACD,SAAS,CAACkB,MAAV,CAAiBlB,SAAS,IAAIA,SAAS,CAACe,EAAV,KAAiBf,SAAS,CAACe,EAAzD,CAAD,CAAZ;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEE,WAAnB;AAAgC,MAAA,SAAS,EAAEjB;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA7BQJ,K;UAM6BD,c;;;KAN7BC,K;AA+BT,eAAeA,KAAf","sourcesContent":["import React from ' react';\nimport Grid from './Grid';\nimport { atom, useRecoilState } from 'recoil';\n\nfunction Array() {\n    const state = atom({\n        key: 'grid',\n        default: [],\n    });\n    \n    const [imageList, setImageList] = useRecoilState(state);  \n\n    const onFileChange = (e) => {\n    const { target : {files} } = e;\n        const theFile = files[0];\n        const reader = new FileReader(); //객체를 이용해 컴퓨터에 저장하는 것을 가능하게\n        reader.readAsDataURL(theFile); //읽을 객체\n        reader.onloadend = (finishedEvent) =>{ //읽기 동작이 성공적으로 완료 되었을 때 발생\n            const { currentTarget: { result } } = finishedEvent;\n            setImageList((imageList) => [...imageList, {src: result , id: imageList.length, theFile}]);\n        }\n    }\n    \n    const removeItems = () => {\n        setImageList(imageList.filter(imageList => imageList.id !== imageList.id));\n    }\n\n    return (\n        <div>\n            <ImageList />\n            <Grid removeItems={removeItems} imageList={imageList}/>\n        </div>\n    );\n}\n\nexport default Array;"]},"metadata":{},"sourceType":"module"}